package org.cauli.junit;import org.apache.commons.lang3.StringUtils;import org.cauli.exception.FileGeneratorException;import org.cauli.instrument.ClassPool;import org.cauli.instrument.ClassUtils;import org.cauli.junit.anno.FileParse;import java.io.File;import java.lang.reflect.Constructor;import java.util.HashMap;import java.util.Map;/** * Created by tianqing.wang on 14-3-18 */public class FileGeneratorFactory {    private volatile static FileGeneratorFactory fileGeneratorFactory;    private Map<String,Class<FileGenerator>> fileGeneratorMap = new HashMap<String,Class<FileGenerator>>() ;    private FileGeneratorFactory(){        for(Class<?> clazz: ClassPool.getClassPool()){            if(clazz.isAnnotationPresent(FileParse.class)&& ClassUtils.isAssignableFromSubClass(FileGenerator.class,clazz)){               FileParse fileParse = clazz.getAnnotation(FileParse.class);                fileGeneratorMap.put(fileParse.suffix(), (Class<FileGenerator>) clazz);            }        }    }    public  FileGenerator createFileGenerator(File file,String readType) throws FileGeneratorException {        if(file.getName().endsWith("txt")){            FileGenerator fileGenerator=new TXTGenerator(file,readType);            return fileGenerator;        }else if(file.getName().endsWith("xls")||file.getName().endsWith("xlsx")){            FileGenerator fileGenerator=new ExcelGenerator(file,readType);            return fileGenerator;        }else{            String suffix = null;            if (file.getName().contains(".")){                suffix = StringUtils.substringAfterLast(file.getName(),".");            }            Constructor<FileGenerator> constructor = null;            try {                constructor = fileGeneratorMap.get(suffix).getConstructor(File.class,String.class);                FileGenerator fileGenerator = constructor.newInstance(file,readType);                return fileGenerator;            } catch (Exception e) {                throw new FileGeneratorException("构建文件解析类的时候出现了异常",e);            }        }    }    public  FileGenerator createFileGenerator(File file) throws FileGeneratorException {        return createFileGenerator(file,"row");    }    public  static FileGeneratorFactory loadGenerator(){        if(fileGeneratorFactory==null){            synchronized (FileGeneratorFactory.class){                if(fileGeneratorFactory==null){                    fileGeneratorFactory=new FileGeneratorFactory();                }            }        }        return fileGeneratorFactory;    }}